[["index.html", "مبانی R مقدمه‌ای بر آشنایی با زبان برنامه نویسی R پیش گفتار", " مبانی R مقدمه‌ای بر آشنایی با زبان برنامه نویسی R محسن ابراهیمی فرودین ۱۴۰۰ پیش گفتار به همراه این کتاب می‌توانید یادگیری زبان برنامه نویسی R را شروع کنید. سعی کنید بعد از هر آموزش تمرینات مربوط به آن را انجام دهید. نظرات و پیشنهادات خود را می‌توانید از طریق ایمیل mohsenebrahimy.ir@gmail.com برای بهبود کتاب به نویسنده ارسال کنید تا در هر بروزرسانی اصلاحات صورت گیرد. این نسخه در تاریخ ۱۴۰۱-۹-۱۶ بروزرسانی شده است. https://mohsenebrahimyir.github.io/base-r/ https://github.com/mohsenebrahimyir/base-r/ امیدوارم این کتاب برایتان مفید باشد. محسن ابراهیمی www.mohsenebrahimy.ir "],["مقدمه.html", "فصل 1 مقدمه", " فصل 1 مقدمه زبان برنامه نویسی R یکی از بهترین زبان‌های برنامه نویسی متن باز است که برای تحلیل آماری داده‌ها استفاده می‌شود. برای این زبان کتابخانه‌های آماری بسیار زیادی تهیه شده است که می‌توانیم به راحتی از آن‌ها استفاده کنیم. "],["نصب-و-آماده-سازی-اولیه.html", "فصل 2 نصب و آماده سازی اولیه ", " فصل 2 نصب و آماده سازی اولیه "],["نصب-r.html", "2.1 نصب R", " 2.1 نصب R از طریق سایت www.r-project.org می‌توانید متناسب با سیستم عامل خود آخرین نسخه R را دانلود و نصب کنید. "],["نصب-rstudio.html", "2.2 نصب RStudio", " 2.2 نصب RStudio برای نوشتن، اجرا و خروجی گرفتن بهتر می‌توانید از یک نرم افزار IDE (Integrated Development Environment) استفاده کنید. برای زبان R می‌توانید از RStudio استفاده کنید. از طریق سایت www.posit.co می‌توانید متناسب با سیستم عامل خود آخرین نسخه RStudio را دانلود و نصب کنید. "],["محیط-rstudio.html", "2.3 محیط RStudio", " 2.3 محیط RStudio شکل 2.1: محیط نرم افزار RStudio "],["مفاهیم-پایه.html", "فصل 3 مفاهیم پایه", " فصل 3 مفاهیم پایه برای شروع بهتر است با یکسری از مفاهیم آشنا شویم. "],["اجرای-کد.html", "3.1 اجرای کد", " 3.1 اجرای کد راه اندازی محیط R در ترمینال و اجرای مستقیم کد در کنسول (Console) $ R &gt; my code ... نکته. برای پاک کردن کنسول می‌توانید از کلید میانبر ctrl + L استفاده کنید. ذخیره کدها در فایل متنی با پسوند code.R و اجرای آن با کد Rscript در کامند لاین $ Rscript code.R چاپ کردن print(&quot;Salam Donya!&quot;) [1] &quot;Salam Donya!&quot; دیدگاه و نظرات برای نوشتن دیدگاه (Comment) یا اجرا نکردن کدهای نوشته شده باید از # قبل از آن‌ها استفاده شود # The Comment helps the readability of the coding نکته. قرار دادن دیدگاه به فهم و خوانایی کد برای دیگران و بازبینی‌های آینده کمک می‌کند. "],["راهنما.html", "3.2 راهنما", " 3.2 راهنما ابزار راهنما (Help) در زبان R به ما امکان دسترسی به توضیحات مختصر هر شئ (Object) را می‌دهد. گرفتن راهنما برای تابع خاص که نام آن را می‌دانیم: ?print انجام جستجو در تمام بسته‌های نصب شده در سیستم: ??print جستجوی کلمه یا عبارت در پرونده راهنما: help.search(&#39;weighed print&#39;) پیدا کردن راهنما برای یک بسته help(package = &#39;tidyverse&#39;) پیدا کردن راهنمای توابع در همه بسته‌های موجود سایت CRAN RSiteSearch(&quot;print&quot;) استفاده از سایت گوگل (www.google.com) نکته. بهترین مهارت برای یک برنامه نویس مهارت گوگل کردن است. پرسیدن و جستجوی سوالات در سایت (stackoverflow.com) نکته. سعی کنید در ابتدای کار کل کدها را تایپ کنید و بدون فهم درست از کدها چیزی را کپی نکنید. "],["محیط-کاری.html", "3.3 محیط کاری", " 3.3 محیط کاری پیدا کردن محیط کاری (Working Directory) (جایی که در آن ورودی‌ها را گرفته و خروجی‌ها را تولید می‌کنید) getwd() [1] &quot;/home/{USER}/Desktop/&quot; تنظیم و تغییر محیط کاری setwd(&#39;/home/{USER}/Documents/&#39;) دقت داشته باشید که در زبان R مانند لینوکس از \"/\" برای جداسازی پوشه (Directory) و زیر پوشه (Sub Directory) استفاده می‌شود. برای تنظیم محیط کاری بهتره از پروژه (Project) در RStudio استفاده کنید. "],["مقادیر.html", "فصل 4 مقادیر", " فصل 4 مقادیر به طور کلی در R برای یک مقدار (Value) انواع رشته‌ای (Character)، عددی (Numeric)، منطقی (Logical) و خالی (Null) وجود دارد. یافتن نوع (Type) یا کلاس (Class) یک شی typeof(&quot;Mohsen&quot;) [1] &quot;character&quot; class(&quot;Mohsen&quot;) [1] &quot;character&quot; "],["رشتهای.html", "4.1 رشته‌ای", " 4.1 رشته‌ای عمومی ترین نوع یک مقدار، نوع رشته‌ای است که درون '' یا \"\" قرار می‌گیرند. class(&#39;Hello&#39;) [1] &quot;character&quot; class(&quot;Hello&quot;) [1] &quot;character&quot; تغییر یک مقدار به نوع رشته‌ای as.character(99) [1] &quot;99&quot; مقادیر از دست رفته رشته‌ای class(NA_character_) [1] &quot;character&quot; "],["عددی.html", "4.2 عددی", " 4.2 عددی مقادیری که عملیات ریاضی بر آن‌ها می‌توان انجام داد. class(-1234567890) [1] &quot;numeric&quot; تغییر یک مقدار به نوع عددی as.numeric(&quot;000100.000&quot;) [1] 100 مقادیر تعریف نشده 0/0 [1] NaN Inf/Inf [1] NaN class(NaN) [1] &quot;numeric&quot; مقادیر عددی از دست رفته class(NA_real_) [1] &quot;numeric&quot; تغییر یک مقدار به نوع عددی صحیح (Integer) as.integer(12.001) [1] 12 مقادیر عددی صحیح از دست رفته class(NA_integer_) [1] &quot;integer&quot; تغییر یک مقدار به نوع عددی اعشاری (Double) as.double(12.001) [1] 12.001 تغییر یک مقدار به نوع عددی مختلط (Complex) as.complex(12.001) [1] 12.001+0i مقادیر عددی مختلط از دست رفته class(NA_complex_) [1] NA_complex_ "],["منطقی.html", "4.3 منطقی", " 4.3 منطقی مقادیر منطقی به صورت درست (True)، غلط (False) یا از دست رفته (Not Available) برمی‌گردند. تغییر مقدار به نوع منطقی به این صورت است که 0 را غلط برمیگرداند و مقادیر غیر 0را درست بر می‌گرداند. as.logical(564564) [1] True as.logical(0) [1] FALSE as.logical(NA) [1] NA 4.3.1 درست مقدار منطقی درست باید یا با حرف T یا با حروف بزرگ TRUE نوشته شود تا به عنوان مقدار منطقی درست پذیرفته شود. class(T) [1] &quot;logical&quot; class(TRUE) [1] &quot;logical&quot; دیگر املاهای عبارت درست، خطا بر می‌گردانند. class(true) Error: object &#39;true&#39; not found class(True) Error: object &#39;True&#39; not found چک کردن درست بودن یک مقدار isTRUE(TRUE) [1] TRUE 4.3.2 غلط مقدار منطقی غلط باید یا با حرف F یا با حروف بزرگ FALSE نوشته شود تا به عنوان مقدار منطقی پذیرفته شود. class(F) [1] &quot;logical&quot; class(FALSE) [1] &quot;logical&quot; دیگر املاهای عبارت غلط، خطا بر می‌گردانند. class(false) [1] Error: object &#39;false&#39; not found class(False) Error: object &#39;False&#39; not found چک کردن غلط بودن isFALSE(FALSE) [1] TRUE 4.3.3 از دست رفته به مقداری که به دلایلی در دسترس نیست گویند که با NA مشخص می‌شوند class(NA) [1] &quot;logical&quot; چک کردن از دست رفته بودن is.na(NA) [1] TRUE "],["خالی.html", "4.4 خالی", " 4.4 خالی مقادیر خالی با حروف بزرگ انگلیسی به صورت NULL مشخص می‌شوند class(NULL) [1] &quot;NULL&quot; چک کردن خالی بودن is.null(NULL) [1] TRUE "],["متغییرها.html", "فصل 5 متغییرها", " فصل 5 متغییرها هر شئ را می‌توان با =، &lt;- و -&gt; به یک متغییر مقدار دهی کرد variable = &quot;Salam&quot; # or variable &lt;- &quot;Salam&quot; # Alt + &quot;-&quot; # or &quot;Salam&quot; -&gt; variable برای نوشتن &lt;- می‌توان از کلید‌های میانبر Alt + - استفاده نمود. برای نمایش متغییر در هنگام مقدار دهی می‌توان کل کد را داخل پرانتز قرار داد. (variable &lt;- &quot;Salam&quot;) [1] &quot;Salam&quot; نام متغییر با حروف کوچک و بزرگ انگلیسی شروع می‌شود و شامل تمام حروف و اعداد انگلیسی، نقطه و زیرخط می‌تواند باشد. vAri.25_blE &lt;- &quot;Salam&quot; "],["ساختار-داده.html", "فصل 6 ساختار داده", " فصل 6 ساختار داده شکل 6.1: ساختار داده در R برای مدیریت داده‌ها در زبان برنامه نویسی R، ساختار داده‌های مختلفی را در نظر گرفته‌اند. مانند: بردار (Vector) c(1, 2, &quot;Mohsen&quot;, NA, 56) [1] &quot;1&quot; &quot;2&quot; &quot;Mohsen&quot; NA &quot;56&quot; 1:4 [1] 1 2 3 4 تولید یک بردار که مقادیر آن ترتیب خاصی دارند (vec &lt;- c(&quot;se&quot;, &quot;yek&quot;, &quot;se&quot;, &quot;do&quot;)) [1] &quot;se&quot; &quot;ye&quot; &quot;se&quot; &quot;do&quot; مرتب کردن برحسب حروف الفبا sort(vec) [1] &quot;do&quot; &quot;se&quot; &quot;se&quot; &quot;yek&quot; فاکتور (factor) (fct &lt;- factor(x = vec, levels = c(&quot;yek&quot;, &quot;do&quot;, &quot;se&quot;))) [1] se yek se do Levels: yek do se مرتب کردن بر حسب سطح بندی sort(fct) [1] yek do se se Levels: yek do se ماتریس (Matrix) matrix(data = 1:4, nrow = 2) [,1] [,2] [1,] 1 3 [2,] 2 4 آرایه (Array) array(data = 1:8, dim = c(2, 2, 2)) , , 1 [,1] [,2] [1,] 1 3 [2,] 2 4 , , 2 [,1] [,2] [1,] 5 7 [2,] 6 8 فرمت داده (Data Frame) data.frame( &quot;name&quot; = c(&quot;ali&quot;, &quot;sara&quot;, &quot;reza&quot;), &quot;age&quot; = c(27, 20, 30) ) name age male 1 ali 27 TRUE 2 sara 20 FALSE 3 reza 30 TRUE لیست (List) list( &quot;vec&quot; = 1:4, &quot;mat&quot; = matrix(data = 1:4, nrow = 2), &quot;ary&quot; = array(data = 1:8, dim = c(2, 2, 2)), &quot;df&quot; = data.frame( &quot;name&quot; = c(&quot;ali&quot;, &quot;sara&quot;, &quot;reza&quot;), &quot;age&quot; = c(27, 20, 30) ) ) $vec [1] 1 2 3 4 $mat [,1] [,2] [1,] 1 3 [2,] 2 4 $ary , , 1 [,1] [,2] [1,] 1 3 [2,] 2 4 , , 2 [,1] [,2] [1,] 5 7 [2,] 6 8 $df name age 1 ali 27 2 sara 20 3 reza 30 "],["توابع.html", "فصل 7 توابع", " فصل 7 توابع تابع (Function) با گرفتن یک یا چند ورودی، یک یا چند خروجی را تولید می‌کند. x = &quot;Salam&quot; # Input print(x) # Function [1] &quot;Salam&quot; # Output "],["توابع-درون-ساخت.html", "7.1 توابع درون ساخت", " 7.1 توابع درون ساخت توابعی که به طور پیش فرض در R قرار دارند را توابع درون ساخت (built-in) می‌گویند. دریافت خلاصه‌ای از ساختار (Structure) یک شئ str(iris) &#39;data.frame&#39;: 150 obs. of 5 variables: $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... تبدیل چند رشته به یک رشته paste(&quot;Salam &quot;, &quot;Donya&quot;, &quot;!&quot;, sep = &quot;&quot;) ## or paste0() [1] &quot;Salam Donya!&quot; جای گذاری یک مقدار در یک رشته با استفاده از %s sprintf(fmt = &quot;Salam %s!&quot;, &quot;Donya&quot;) [1] &quot;Salam Donya!&quot; چاپ کردن چند چیز cat(&quot;Salam &quot;, &quot;Donya&quot;, &quot;!&quot;, sep = &quot;&quot;) Salam Donya! خواندن کامند لاین readline(prompt = &quot;lotfan ye chezy vared konid: &quot;) lotfan ye chezy vared konid: "],["ساخت-تابع.html", "7.2 ساخت تابع", " 7.2 ساخت تابع برای ساخت تابع باید به صورت زیر عمل کنیم. name &lt;- function(input) { # Do something return(output) } تابع جمع بستن jam &lt;- function(x, y) { z &lt;- x + y return(z) } jam(2, 3) [1] 5 class(jam) [1] &quot;function&quot; تابع سلام کردن salam &lt;- function(name) { salam_name &lt;- paste(&quot;Salam&quot;, name, &quot;aziz&quot;) return(salam_name) } salam(&quot;Mohsen&quot;) [1] &quot;Salam Mohsen aziz&quot; مقدار اولیه برای ورودی‌ها salam &lt;- function(name = &quot;Mohsen&quot;) { salam_name &lt;- sprintf(&quot;Salam %s Aziz&quot;, name) return(salam_name) } salam() [1] &quot;Salam Mohsen Aziz&quot; salam(name = &quot;Arash&quot;) [1] &quot;Salam Arash Aziz&quot; "],["بسته.html", "7.3 بسته", " 7.3 بسته خیلی از افراد توابعی که برای پروژه‌های شخصی خود نوشته‌اند را به صورت بسته (Package) اختیار دیگران قرار داده‌اند. 7.3.1 نصب بسته برای استفاده از توابع توسعه داده شده توسط دیگران، باید بسته مربوطه آن تابع را نصب نماییم: دانلود و نصب بسته‌ها از مخزن کِرَن (CRAN) install.packages(&quot;dplyr&quot;) نصب از مخزن گیت‌هاب (Github) ابتدا باید یکی از بسته‌های remotes یا devtools را نصب و سپس بسته مورد نظر را با یکی از روش زیر نصب نمایید. remotes::install_github(&quot;tidyverse/dplyr&quot;) # or devtools::install_github(&quot;tidyverse/dplyr&quot;) دانلود از مخازن دیگر مخزن بیت باکت (Bitbucket) با تابع install_bitbucket() مخزن گیت جنریک (Generic git) با تابع install_git() … 7.3.2 بارگذاری بسته library(\"package\"): تمام توابع موجود در یک پکیج را در محیط کاری آپلود می‌کند، اگر بسته نصب نباشد خطا (Error) برمی‌گرداند: library(&quot;alaki&quot;) Error in library(&quot;alaki&quot;) : there is no package called ‘alaki’ require(\"package\"): تمام توابع موجود در یک پکیج را در محیط کاری آپلود می‌کند، اگر بسته نصب نباشد غلط (FALSE) برمی‌گرداند: require(&quot;alaki&quot;) Loading required package: alaki Warning message: In library(package, lib.loc = lib.loc, character.only = TRUE, ... : there is no package called ‘alaki’ (require(&quot;alaki&quot;)) [1] FALSE if (!require(&quot;alaki&quot;)) install.packages(&quot;alaki&quot;) package::function(): این روش فقط برای مواقعی است که به صورت محلی می‌خواهیم تابع خاصی از یک پکیج را استفاده کنیم و دیگر به آن نیازی نداریم. dplyr::select(iris, c(&quot;Sepal.Width&quot;, &quot;Species&quot;)) Sepal.Width Species 1 3.5 setosa 2 3.0 setosa 3 3.2 setosa 4 3.1 setosa ... ... ... 7.3.3 بسته‌های پرکاربرد Tidyverse library(tidyverse) ── Attaching packages ────────────────── tidyverse 1.3.1 ── ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ✓ tibble 3.1.6 ✓ dplyr 1.0.8 ✓ tidyr 1.2.0 ✓ stringr 1.4.0 ✓ readr 2.1.2 ✓ forcats 0.5.1 ── Conflicts ─────────────────────────── tidyverse_conflicts() ── x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() این بسته متشکل از بسته‌های معروفی همچون ggplot، tidyr، dplyr، readr، stringr و … است. "],["فایلها.html", "فصل 8 فایل‌ها", " فصل 8 فایل‌ها فایل‌ها برای ذخیره سازی، و انتقال داده‌ها استفاده می‌شوند که نیاز داریم از روی آن‌ها داده‌ها را بخوانیم و بنویسیم. خروجی گرفتن داده با پسوند .csv write.csv(x = iris, file = &quot;iris.csv&quot;) وارد کردن داده با پسوند .csv read.csv(file = &quot;iris.csv&quot;) X Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 1 5.1 3.5 1.4 0.2 setosa 2 2 4.9 3.0 1.4 0.2 setosa 3 3 4.7 3.2 1.3 0.2 setosa خروجی گرفتن داده با پسوند اکسل writexl::write_xlsx(x = iris, path = &quot;iris.xlsx&quot;) وارد کردن داده با پسوند اکسل readxl::read_xlsx(path = &quot;iris.xlsx&quot;) # A tibble: 150 × 5 Sepal.…¹ Sepal…² Petal…³ Petal…⁴ Species &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa 4 4.6 3.1 1.5 0.2 setosa 5 5 3.6 1.4 0.2 setosa 6 5.4 3.9 1.7 0.4 setosa 7 4.6 3.4 1.4 0.3 setosa 8 5 3.4 1.5 0.2 setosa 9 4.4 2.9 1.4 0.2 setosa 10 4.9 3.1 1.5 0.1 setosa # … with 140 more rows, and abbreviated # variable names ¹​Sepal.Length, # ²​Sepal.Width, ³​Petal.Length, # ⁴​Petal.Width # ℹ Use `print(n = ...)` to see more rows "],["عملگرها.html", "فصل 9 عملگرها", " فصل 9 عملگرها عملگر (Operator) نوع خاصی از تابع است که روی چیز‌های که در چپ و راست آن قرار گیرد، اعمال می‌شود. $ unique(iris $ Species) [1] setosa versicolor virginica Levels: setosa versicolor virginica با استفاده از عملگر پایپ می‌توانیم خروجی یک تابع را به عنوان وروردی به اولین آرگومان تابع بعدی دهیم عملگر پایپ می‌تواند کار با توابع را ساده و از تعریف متغییر‌های زیاد جلوگیری کند. |&gt; یک عملگر درون ساخت است. iris $ Species |&gt; unique() [1] setosa versicolor virginica Levels: setosa versicolor virginica %&gt;% باید بسته tidyverse را فراخانی کنیم. iris $ Species %&gt;% unique() [1] setosa versicolor virginica Levels: setosa versicolor virginica "],["عملگرهای-حسابی.html", "9.1 عملگرهای حسابی", " 9.1 عملگرهای حسابی عملگر حسابی اعداد را به عنوان ورودی می‌گیرد و اعمال ریاضی را اعمال می‌کند. جمع 2 + 3 [1] 5 تفریق 2 - 3 [1] -1 ضرب 2 * 3 [1] 6 تقسیم 2 / 3 [1] 0.6666667 باقی‌مانده تقسیم 5 %% 3 [1] 2 قسمت صحیح تقسیم 5 %/% 3 [1] 1 توان 2^3 [1] 8 استفاده از توان کسری برای جذر (4)^(1/2) [1] 2 "],["عملگر-منطقی.html", "9.2 عملگر منطقی", " 9.2 عملگر منطقی عملگر منطقی مقادیر درست و غلط برمی‌گرداند. برابری 1 == 2 [1] FALSE نابرابری 1 != 2 [1] TRUE بزرگتری 2 &gt; 2 [1] FALSE بزرگتری یا برابری 2 &gt;= 2 [1] FALSE کوچکتری 2 &lt; 2 [1] FALSE کوچکتری یا برابری 2 &lt;= 2 [1] TRUE و هر دو شرط اجرا می‌شود و در صورت درست بودن هر دوی آن‌ها مقدار TRUE برمی‌گرداند در غیر این صورت مقدار FALSE برمیگرداند. 1 == 2 &amp; 1 &lt; 2 [1] FALSE شرط دوم در صورت درست بودن شرط اول اجرا می‌شود. و در صورت درست بودن هر دوی آن‌ها مقدار TRUE برمی‌گرداند در غیر این صورت مقدار FALSE برمیگرداند. 1 == 2 &amp;&amp; 1 &lt; 2 [1] FALSE یا هر دو شرط اجرا می‌شود و در صورت درست بودن یکی از آن‌ها مقدار TRUE برمی‌گرداند در غیر این صورت مقدار FALSE برمیگرداند. 1 == 2 | 1 &lt; 2 [1] TRUE شرط دوم در صورت نادرست بودن شرط اول اجرا می‌شود و اگر یکی از آن‌ها درست بود مقدار TRUE برمی‌گرداند در غیر این صورت مقدار FALSE برمیگرداند. 1 == 2 || 1 &lt; 2 [1] TRUE مخالف بعد از بررسی عمل منطقی خلاف مقدار برگردانده شده را بر می‌گرداند. !(1 == 2) [1] TRUE شامل بودن برای این که چک کنیم که آیا اعضای یک بردار درون بردار دیگری هست یا خیر c(&quot;reza&quot;, &quot;ebrahim&quot;) %in% c(&quot;mohsen&quot;, &quot;reza&quot;, &quot;mahsa&quot;, &quot;iman&quot;, &quot;peyman&quot;) [1] TRUE FALSE "],["دستورات-شرطی.html", "فصل 10 دستورات شرطی", " فصل 10 دستورات شرطی دستورات شرطی برای تصمیم‌گیری و جهت دهی جریان پردازش اطلاعات استفاده می‌شوند. if a &lt;- 33 b &lt;- 200 if (b &gt; a) { print(&quot;b is greater than a&quot;) } [1] &quot;b is greater than a&quot; if else a &lt;- 200 b &lt;- 33 if (b &gt; a) { print(&quot;b is greater than a&quot;) } else { print(&quot;b is not greater than a&quot;) } &quot;b is not greater than a&quot; if else if a &lt;- 33 b &lt;- 33 if (b &gt; a) { print(&quot;b is greater than a&quot;) } else if (a == b) { print (&quot;a and b are equal&quot;) } &quot;a and b are equal&quot; if else if else a &lt;- 200 b &lt;- 33 if (b &gt; a) { print(&quot;b is greater than a&quot;) } else if (a == b) { print(&quot;a and b are equal&quot;) } else { print(&quot;a is greater than b&quot;) } [1] &quot;a is greater than b&quot; شروط تو در تو x &lt;- 41 if (x &gt; 10) { print(&quot;Above ten&quot;) if (x &gt; 20) { print(&quot;and also above 20!&quot;) } else { print(&quot;but not above 20.&quot;) } } else { print(&quot;below 10.&quot;) } [1] &quot;Above ten&quot; [1] &quot;and also above 20!&quot; و a &lt;- 200 b &lt;- 33 c &lt;- 500 if (a &gt; b &amp; c &gt; a) { print(&quot;Both conditions are true&quot;) } [1] &quot;Both conditions are true&quot; یا a &lt;- 200 b &lt;- 33 c &lt;- 500 if (a &gt; b | a &gt; c) { print(&quot;At least one of the conditions is true&quot;) } [1] &quot;At least one of the conditions is true&quot; ifelse() a &lt;- 3 b &lt;- 5 ifelse((a &lt; b), &quot;b is greater than b&quot;, &quot;b is not greater than b&quot;) [1] &quot;b is greater than b&quot; "],["حلقه.html", "فصل 11 حلقه", " فصل 11 حلقه while برای تکرارهای به مقدار نا معلوم می‌توانیم از ساختار حلقه while استفاده نماییم. i = 5 while (i &gt; 0) { &quot;%sth alaki&quot; |&gt; sprintf(i) |&gt; print() i &lt;- i - 1 } ## [1] &quot;5th alaki&quot; ## [1] &quot;4th alaki&quot; ## [1] &quot;3th alaki&quot; ## [1] &quot;2th alaki&quot; ## [1] &quot;1th alaki&quot; for برای تکرار به مقدار معلوم می‌توانیم از ساختار حلقه for استفاده نماییم. for (i in 1:5) { &quot;%sth alaki&quot; |&gt; sprintf(i) |&gt; print() } ## [1] &quot;1th alaki&quot; ## [1] &quot;2th alaki&quot; ## [1] &quot;3th alaki&quot; ## [1] &quot;4th alaki&quot; ## [1] &quot;5th alaki&quot; "],["بردار---کمی-بیشتر.html", "فصل 12 بردار - کمی بیشتر", " فصل 12 بردار - کمی بیشتر بردار (Vector) یک ساختار یک بعدی که تمام مقادیر آن از یک نوع هستند. \\[\\Large x = \\begin{bmatrix} x_{1} &amp; x_{2} &amp; \\dots &amp; x_{n} \\end{bmatrix} \\] بردار خالی \\[\\Large x = [] \\] c() NULL بردار تک عضوی \\[\\Large x = \\begin{bmatrix} 27 \\end{bmatrix} \\] c(27) [1] 27 \\[\\Large x = \\begin{bmatrix} a \\end{bmatrix} \\] c(&quot;a&quot;) [1] &quot;a&quot; \\[\\Large x = \\begin{bmatrix} True \\end{bmatrix} \\] c(TRUE) [1] TRUE \\[\\Large x = \\begin{bmatrix} Not\\;Available \\end{bmatrix} \\] c(NA) [1] NA بردار چند عضوی دلخواه \\[\\Large x = \\begin{bmatrix} 27 &amp; Mohsen &amp; True &amp; Not\\;Available \\end{bmatrix} \\] (reshteei &lt;- c(27, &quot;Mohsen&quot;, TRUE, NA)) [1] &quot;27&quot; &quot;Mohsen&quot; &quot;TRUE&quot; NA اگر در بین مقادیر یک نوع رشته‌ای وجود داشته باشد، وکتور از نوع رشته‌ای می‌شود. class(reshteei) [1] &quot;character&quot; اگر در بین مقادیر عددی مقادیر منطقی داشته باشیم،، وکتور از نوع عددی می‌شود. (adadi &lt;- c(27, TRUE, NA)) [1] 27 1 NA class(adadi) [1] &quot;numeric&quot; تشکیل یک بردار با چند بردار c(reshteei, adadi, 35, &quot;Salam&quot;) [1] &quot;27&quot; &quot;Mohsen&quot; &quot;TRUE&quot; NA &quot;27&quot; &quot;1&quot; NA &quot;35&quot; &quot;Salam&quot; می‌توان برای هر یک از مقادیر یک نام هم تعریف کرد. c(1, &quot;dovom&quot; = 2, 3) dovom 1 2 3 "],["مقادیر-متوالی.html", "12.1 مقادیر متوالی", " 12.1 مقادیر متوالی مرتب کردن مقادیر sort(c(5, 7, -2, 5, 3, 9)) [1] -2 3 5 5 7 9 توالی صعودی در بازه مشخص 1:10 [1] 1 2 3 4 5 6 7 8 9 10 توالی نزولی در بازه مشخص 10:1 [1] 10 9 8 7 6 5 4 3 2 1 توالی صعودی با تعداد مشخص seq_len(5) [1] 1 2 3 4 5 توالی صعودی با فاصله مشخص در بازه مشخص seq(from = 5, to = 10, by = .5) [1] 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 توالی صعودی به تعداد مشخص در بازه مشخص seq(from = 5, to = 10, length = 5) [1] 5.00 6.25 7.50 8.75 10.00 حروف کوچک الفبای انگلیسی letters [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; [14] &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; حروف بزرگ الفبای انگلیسی LETTERS [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; [14] &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; تکرار یک مقدار به تعداد مشخص rep(x = 2, 10) [1] 2 2 2 2 2 2 2 2 2 2 تکرار یک بردار به تعداد n بار rep(c(1, 6, 5), times = 2) [1] 1 6 5 1 6 5 تکرار هر مقدار یک بردار به تعداد n بار rep(c(1, 6, 5), each=2) [1] 1 1 6 6 5 5 "],["مقادیر-تصادفی.html", "12.2 مقادیر تصادفی", " 12.2 مقادیر تصادفی اعداد تصادفی در بازه مشخص بدون تکرار sample(x = 1:20, size = 10) [1] 5 12 1 4 6 7 10 8 3 13 اعداد تصادفی در بازه مشخص با تکرار sample(x = 1:20, size = 10, replace = T) [1] 7 18 4 16 10 19 9 16 17 10 حروف کوچک انگلیسی تصادفی بدون تکرار sample(x = letters, size = 10) [1] &quot;r&quot; &quot;u&quot; &quot;z&quot; &quot;h&quot; &quot;k&quot; &quot;a&quot; &quot;m&quot; &quot;b&quot; &quot;v&quot; &quot;s&quot; اعداد تصادفی با توزیع نرمال rnorm(n = 10, mean = 0, sd = 1) [1] 1.29085505 0.70984957 -0.04318293 0.63228842 0.48876293 [6] 0.03517201 -0.13634837 -0.16242425 0.91619639 -0.72076816 اعداد تصادفی با توزیع یکنواخت runif(n = 10, min = 0, max = 1) [1] 0.8406612 0.7941666 0.5174069 0.2705386 0.2232102 [6] 0.8314685 0.9551069 0.1105243 0.1253661 0.1118882 "],["ریاضی.html", "12.3 ریاضی", " 12.3 ریاضی (math &lt;- c(1.3574, -2.2, 5, 4, -7, 2.55, 1.4, -8)) [1] 1.3574 -2.2000 5.0000 4.0000 -7.0000 2.5500 1.4000 -8.0000 گرد کردن مقادیر تا رقم اعشار دلخواه round(math, digits = 2) [1] 1.36 -2.20 5.00 4.00 -7.00 2.55 1.40 -8.00 قدرمطلق مقادیر \\[\\Large |x| = \\begin{bmatrix} |x_{1}| &amp; |x_{2}| &amp; \\dots &amp; |x_{n}| \\end{bmatrix} \\] abs(math) [1] 1.3574 2.2000 5.0000 4.0000 7.0000 2.5500 1.4000 8.0000 جذر \\[\\Large \\sqrt{x} = \\begin{bmatrix} \\sqrt{x_{1}} &amp; \\sqrt{x_{2}} &amp; \\dots &amp; \\sqrt{x_{n}} \\end{bmatrix} \\] sqrt(math) [1] 1.165075 NaN 2.236068 2.000000 NaN 1.596872 1.183216 NaN "],["انتخاب-مقادیر.html", "12.4 انتخاب مقادیر", " 12.4 انتخاب مقادیر (vec &lt;- c(Name = &quot;Mohsen&quot;, Age = 27, Male = TRUE, &quot;alaki&quot;, NA, &quot;alaki&quot;)) Name Age Male &quot;Mohsen&quot; &quot;27&quot; &quot;TRUE&quot; &quot;alaki&quot; NA &quot;alaki&quot; انتخاب اندیس (Index) n ام vec[3] Male &quot;TRUE&quot; انتخاب همه مقادیر به غیر از اندیس n ام vec[-3] Name Age &quot;Mohsen&quot; &quot;27&quot; &quot;alaki&quot; NA &quot;alaki&quot; انتخاب اندیس‌های دلخواه vec[c(2, 5)] Age &quot;27&quot; NA انتخاب همه‌ی اندیس‌ها به غیر از اندیس‌های دلخواه vec[-c(2, 5)] Name Male &quot;Mohsen&quot; &quot;TRUE&quot; &quot;alaki&quot; &quot;alaki&quot; انتخاب مقدار بوسیله نام vec[c(&quot;Name&quot;, &quot;Age&quot;)] Name Age &quot;Mohsen&quot; &quot;27&quot; تغییر ترتیب اندیس‌های مقادیر vec[c(5, 2)] Age NA &quot;27&quot; n مقدار اول بردار head(x = vec, n = 3) Name Age Male &quot;Mohsen&quot; &quot;27&quot; &quot;TRUE&quot; n مقدار آخر بردار tail(x = vec, n = 3) &quot;alaki&quot; NA &quot;alaki&quot; گرفتن مقادیر بدون تکرار unique(x = vec) [1] &quot;Mohsen&quot; &quot;27&quot; &quot;TRUE&quot; &quot;alaki&quot; NA گرفتن مقادیر تکراری این تابع برای مقادیر که بیش از یک بار تکرار شده‌اند، مقدار درست و برای بقیه غلط بر میگرداند duplicated(x = vec) [1] FALSE FALSE FALSE FALSE FALSE TRUE انتخاب مقادیر تکرار شده vec[duplicated(vec)] &quot;alaki&quot; انتخاب مقادیر تکرار نشده vec[!duplicated(vec)] Name Age Male &quot;Mohsen&quot; &quot;27&quot; &quot;TRUE&quot; &quot;alaki&quot; NA حذف مقادیر از دست رفته na.omit(vec) Name Age Male &quot;Mohsen&quot; &quot;27&quot; &quot;TRUE&quot; &quot;alaki&quot; &quot;alaki&quot; "],["آمار.html", "12.5 آمار", " 12.5 آمار (stat &lt;- c(1, -2, 5, 5, 4, -7, 5, -2, 6, 0, 3)) ## [1] 1 -2 5 5 4 -7 5 -2 6 0 3 بیشترین (Maximum) \\[\\Large x_{max} \\] max(stat) ## [1] 6 کمترین1 \\[\\Large x_{min} \\] min(stat) ## [1] -7 تعداد2 \\[\\Large N \\] length(stat) ## [1] 11 بازه3 \\[\\Large x_{min} \\leq x \\leq x_{max} \\] range(stat) ## [1] -7 6 میانه4 \\[\\Large x_{median} = \\left\\{ \\begin{array}{lr} x_{\\frac{N}{2}} &amp; {\\bf if}\\;N\\;{\\bf is\\;even} \\\\ \\cfrac{x_{\\frac{N-1}{2}} + x_{\\frac{N+1}{2}}}{2} &amp; {\\bf if}\\;N\\;{\\bf is\\;odd} \\end{array} \\right. \\] median(stat) ## [1] 3 چارک‌ها5 چارک اول (\\({\\bf Q1}\\)), چارک دوم یا همان میانه (\\({\\bf Q2\\;or\\;Median}\\)), چارک سوم (\\({\\bf Q3}\\)), \\[\\Large x_{sort} = \\left[ \\begin{array}{ccccccccccc} -7 &amp; -2 &amp; \\overset{\\overset{{\\bf Q1}}{\\uparrow}}{-2} &amp; 0 &amp; 1 &amp; \\overset{\\overset{{\\bf Q2}}{\\uparrow}}{3} &amp; 4 &amp; 5 &amp; \\overset{\\overset{{\\bf Q3}}{\\uparrow}}{5} &amp; 5 &amp; 6 \\end{array} \\right] \\] برای محاسبه چارک‌ها باید تابع جدید ساخت زیرا تابع پیش فرضی وجود ندارد تعریف تابع quart &lt;- function(x) { x &lt;- sort(x) n &lt;- length(x) m &lt;- (n+1)/2 if (floor(m) != m) { l &lt;- m-1/2; u &lt;- m+1/2 } else { l &lt;- m-1; u &lt;- m+1 } c(Q1=median(x[1:l]), Q2=median(x), Q3=median(x[u:n])) } استفاده از تابع quart(stat) ## Q1 Q2 Q3 ## -2 3 5 مد6 به دلیل نبود تابع مد در زبان R می‌توانیم برای آن از تابع زیر استفاده کنیم. تعریف تابع modes &lt;- function(x) { ux &lt;- unique(x) tab &lt;- tabulate(match(x, ux)) ux[tab == max(tab)] } استفاده از تابع modes(stat) ## [1] 5 مجموع \\[\\Large S_{x} = \\sum_{i=1}^{i=n} x_{i} \\] sum(stat) ## [1] 18 میانگین \\[\\Large \\mu_{x} = \\cfrac{\\sum x_{i}}{N} \\] mean(stat) ## [1] 1.636364 انحراف معیار \\[\\Large \\sigma = \\sqrt{\\cfrac{\\sum(x_{i} - \\mu)^{2}}{N}} \\] sd(stat) ## [1] 4.05642 نرمال سازی داده‌ها \\[\\Large Z = \\frac{x - \\mu}{\\sigma} = \\begin{bmatrix} \\frac{x_{1} - \\mu}{\\sigma} &amp; \\frac{x_{2} - \\mu}{\\sigma} &amp; \\dots &amp; \\frac{x_{n} - \\mu}{\\sigma} \\end{bmatrix} \\] as.vector(scale(stat)) ## [1] -0.1568781 -0.8964465 0.8292130 0.8292130 0.5826902 -2.1290604 ## [7] 0.8292130 -0.8964465 1.0757358 -0.4034009 0.3361674 جمع با مقادیر از دست رفته sum(c(1, 2, 3, NA, 5, NA)) ## [1] NA جمع بدون مقادیر از دست رفته sum(c(1, 2, 3, NA, 5, NA), na.rm = T) ## [1] 11 Minimum↩︎ Count↩︎ Range↩︎ Median↩︎ Quartile↩︎ Mode↩︎ "],["ماتریس---کمی-بیشتر.html", "فصل 13 ماتریس - کمی بیشتر", " فصل 13 ماتریس - کمی بیشتر هر ماتریس7 از n تا ردیف و m تا ستون تشکیل شده است. \\[\\Large {\\bf M}_{n \\times m} = \\left. \\vphantom{\\begin{array}{c}1\\\\1\\\\1\\\\1\\\\1\\end{array}} \\smash{\\underbrace{\\left[ \\begin{array}{ccccc} x_{11} &amp; x_{12} &amp; \\dots &amp; x_{1m} \\\\ x_{21} &amp; x_{22} &amp; \\dots &amp; x_{2m} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ x_{n1} &amp; x_{n2} &amp; \\dots &amp; x_{nm} \\end{array} \\right] }_{m\\;Columns}} \\right\\} \\,n\\;Rows\\\\ \\] (mtx &lt;- matrix(nrow = 5, ncol = 4)) ## [,1] [,2] [,3] [,4] ## [1,] NA NA NA NA ## [2,] NA NA NA NA ## [3,] NA NA NA NA ## [4,] NA NA NA NA ## [5,] NA NA NA NA نوع ساختار داده class(mtx) ## [1] &quot;matrix&quot; &quot;array&quot; ابعاد8 dim(mtx) ## [1] 5 4 ساختار و نوع مقادیر str(mtx) ## logi [1:5, 1:4] NA NA NA NA NA NA ... خواص ماتریس attributes(mtx) ## $dim ## [1] 5 4 دادن تک مقدار به ماتریس matrix(data = 1, nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 1 1 ## [2,] 1 1 1 ## [3,] 1 1 1 تبدیل بردار به ماتریس matrix(data = c(1,2,4,4,5,4,7,6,3), nrow = 3, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 6 ## [3,] 4 4 3 چینش به ترتیب ستون \\[\\Large M_{n \\times m} = \\begin{bmatrix} \\overset{\\downarrow}{1} &amp; \\overset{\\downarrow}{4} &amp; \\overset{\\downarrow}{7} \\\\ 2 &amp; 5 &amp; 8\\\\ 3 &amp; 6 &amp; 9 \\end{bmatrix} \\] matrix(data = 1:9, nrow = 3, ncol = 3) ## byrow = FALSE ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 چینش به ترتیب ردیف \\[\\Large M_{n \\times m} = \\begin{bmatrix} \\rightarrow 1 &amp; 2 &amp; 3 \\\\ \\rightarrow 4 &amp; 5 &amp; 6 \\\\ \\rightarrow 7 &amp; 8 &amp; 9 \\end{bmatrix} \\] matrix(data = 1:9, nrow = 3, ncol = 3, byrow = TRUE) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 Matrix↩︎ Dimansion↩︎ "],["تغییر-ابعاد-ماتریس.html", "13.1 تغییر ابعاد ماتریس", " 13.1 تغییر ابعاد ماتریس ساخت یک ماتریس \\(4 \\times 4\\) (mtx &lt;- matrix(data = 1:16, nrow = 4, ncol = 4)) ## [,1] [,2] [,3] [,4] ## [1,] 1 5 9 13 ## [2,] 2 6 10 14 ## [3,] 3 7 11 15 ## [4,] 4 8 12 16 تغییر ابعاد ماتریس به \\(8 \\times 2\\) (dim(mtx) &lt;- c(8, 2)) ## [1] 8 2 mtx ## [,1] [,2] ## [1,] 1 9 ## [2,] 2 10 ## [3,] 3 11 ## [4,] 4 12 ## [5,] 5 13 ## [6,] 6 14 ## [7,] 7 15 ## [8,] 8 16 نکته: در هنگام تغییر ابعاد باید حاصل ضرب ابعاد جدید با حاصل ضرب ابعاد قبلی برابر باشد. \\[\\Large {\\bf M}_{n \\times m} \\overset{{\\bf if} \\; n \\times m = n&#39; \\times m&#39;}{\\Longrightarrow} {\\bf M&#39;}_{n&#39; \\times m&#39;} \\] ماتریس یک ساختار دو بعدی از مقادیر است که تمام مقادیر آن از یک نوع هستند. برای مثال حتی یک مقدار رشته‌ای در بین مقادیر عددی باشد، نوع تمام مقادیر، رشته‌ای می‌شود. (mtx &lt;- matrix(c(1:15, &quot;a&quot;), 4, 4)) ## [,1] [,2] [,3] [,4] ## [1,] &quot;1&quot; &quot;5&quot; &quot;9&quot; &quot;13&quot; ## [2,] &quot;2&quot; &quot;6&quot; &quot;10&quot; &quot;14&quot; ## [3,] &quot;3&quot; &quot;7&quot; &quot;11&quot; &quot;15&quot; ## [4,] &quot;4&quot; &quot;8&quot; &quot;12&quot; &quot;a&quot; str(mtx) ## chr [1:4, 1:4] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; ... تعریف ماتریس همانی9 \\[\\Large {\\bf I}_{n} = \\begin{bmatrix} 1&amp;0&amp;\\cdots &amp;0\\\\ 0&amp;1&amp;\\cdots &amp;0\\\\ \\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\\\ 0&amp;0&amp;\\cdots &amp;1 \\end{bmatrix} \\] diag(4) ## [,1] [,2] [,3] [,4] ## [1,] 1 0 0 0 ## [2,] 0 1 0 0 ## [3,] 0 0 1 0 ## [4,] 0 0 0 1 تعریف ماتریس قطری10 \\[\\Large {\\bf I}_{n} = \\begin{bmatrix} x_{1}&amp;0&amp;\\cdots &amp;0\\\\ 0&amp;x_{2}&amp;\\cdots &amp;0\\\\ \\vdots&amp;\\vdots&amp;\\ddots&amp;\\vdots\\\\ 0&amp;0&amp;\\cdots &amp;x_{n} \\end{bmatrix} \\] diag(c(9, 5, 8, 3)) ## [,1] [,2] [,3] [,4] ## [1,] 9 0 0 0 ## [2,] 0 5 0 0 ## [3,] 0 0 8 0 ## [4,] 0 0 0 3 گرفتن قطر یک ماتریس diag(mtx) ## [1] &quot;1&quot; &quot;6&quot; &quot;11&quot; &quot;a&quot; Identity↩︎ Diagnol↩︎ "],["مقایسه-دو-ماتریس.html", "13.2 مقایسه دو ماتریس", " 13.2 مقایسه دو ماتریس ماتریس A \\[\\Large A = \\begin{bmatrix} a_{11} &amp; \\cdots &amp; a_{1m} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{n1} &amp; \\cdots &amp; a_{nm} \\\\ \\end{bmatrix} \\] (mtx_A &lt;- matrix(1:9, 3, 3)) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ماتریس B \\[\\Large B = \\begin{bmatrix} b_{11} &amp; \\cdots &amp; b_{1m} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ b_{n1} &amp; \\cdots &amp; b_{nm} \\\\ \\end{bmatrix} \\] (mtx_B &lt;- matrix(9:1, 3, 3)) ## [,1] [,2] [,3] ## [1,] 9 6 3 ## [2,] 8 5 2 ## [3,] 7 4 1 13.2.1 عملگرهای منطقی تساوی \\[\\Large \\Large A \\overset{?}{\\leq} B = \\begin{bmatrix} a_{11} \\overset{?}{\\leq} b_{11} &amp; \\cdots &amp; a_{1m} \\overset{?}{\\leq} b_{1m} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{n1} \\overset{?}{\\leq} b_{n1} &amp; \\cdots &amp; a_{nm} \\overset{?}{\\leq} b_{nm} \\\\ \\end{bmatrix} \\] mtx_A == mtx_B ## [,1] [,2] [,3] ## [1,] FALSE FALSE FALSE ## [2,] FALSE TRUE FALSE ## [3,] FALSE FALSE FALSE به جای علامت برابری می‌توان از نابرابری (!=)، کوچکتری (&lt;)، کوچکتر یا برابری (&lt;=)، بزرگتری (&gt;)، بزرگتر یا برابری (&gt;=)، استفاده کرد. 13.2.2 عملگرهای ریاضی عملیات‌های درایه به درایه \\[\\Large \\Large A + B = \\begin{bmatrix} a_{11} + b_{11} &amp; \\cdots &amp; a_{1m} + b_{1m} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{n1} + b_{n1} &amp; \\cdots &amp; a_{nm} + b_{nm} \\\\ \\end{bmatrix} \\] mtx_A + mtx_B ## [,1] [,2] [,3] ## [1,] 10 10 10 ## [2,] 10 10 10 ## [3,] 10 10 10 به جای علامت جمع می‌توان از تفریق (-)، ضرب (*)، تقسیم (/)، توان (^)، استفاده کرد. ضرب ماتریسی \\[\\Large \\begin{aligned} A \\times B &amp; = \\begin{bmatrix} a_{11} &amp; \\cdots &amp; a_{1m} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{n1} &amp; \\cdots &amp; a_{nm} \\\\ \\end{bmatrix} \\times \\begin{bmatrix} b_{11} &amp; \\cdots &amp; b_{1m} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ b_{n1} &amp; \\cdots &amp; b_{nm} \\\\ \\end{bmatrix} \\\\ &amp; = \\begin{bmatrix} a_{11} \\times b_{11} + \\cdots + a_{1m} \\times b_{n1} &amp; \\cdots &amp; a_{11} \\times b_{1m} + \\cdots + a_{1m} \\times b_{nm} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{n1} \\times b_{11} + \\cdots + a_{nm} \\times b_{n1} &amp; \\cdots &amp; a_{n1} \\times b_{1m} + \\cdots + a_{nm} \\times b_{nm} \\\\ \\end{bmatrix} \\end{aligned} \\] mtx_A %*% mtx_B ## [,1] [,2] [,3] ## [1,] 90 54 18 ## [2,] 114 69 24 ## [3,] 138 84 30 "],["فرمت-داده---کمی-بیشتر.html", "فصل 14 فرمت داده - کمی بیشتر", " فصل 14 فرمت داده - کمی بیشتر ساختاری پر کاربرد دیگری که خیلی در زبان برنامه نویسی R شناخته شده، فرمت داده یا data frame است. نحوه تعریف یک فرمت داده به صورت زیر است: df &lt;- data.frame( &quot;Name&quot; = c(&quot;Mohsen&quot;, &quot;Xie&quot;, &quot;Narges&quot;), &quot;Sen&quot; = c(NA, 45, 36), &quot;Gender&quot; = factor(x = c(&quot;Male&quot;, NA, &quot;Female&quot;), levels = c(&quot;Female&quot;, &quot;Male&quot;)), &quot;Single&quot; = c(TRUE, FALSE, NA) ) نمایش داده با ساختار فرمت داده df ## Name Sen Gender Single ## 1 Mohsen NA Male TRUE ## 2 Xie 45 &lt;NA&gt; FALSE ## 3 Narges 36 Female NA نمایش ساختار داده str(df) ## &#39;data.frame&#39;: 3 obs. of 4 variables: ## $ Name : chr &quot;Mohsen&quot; &quot;Xie&quot; &quot;Narges&quot; ## $ Sen : num NA 45 36 ## $ Gender: Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 NA 1 ## $ Single: logi TRUE FALSE NA همانطور که ساختار هر یک از ستون‌ها را مشاهده می‌کنید، متوجه می‌شوید که هر ستون ساختار برداری خاص خودش را دارد و دیگر مانند ماتریس همه‌ی ستون‌های آن یک نوع کلاس ندارند. تقریبا تمام خواصی که ساختار ماتریسی دارد، ساختار فرمت داده نیز دارد. نام سطر و ستون rownames(df) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; colnames(df) ## [1] &quot;Name&quot; &quot;Sen&quot; &quot;Gender&quot; &quot;Single&quot; تغییر نام سطر‌ها rownames(df) &lt;- c(&quot;avali&quot;, &quot;dovomi&quot;, &quot;sevomi&quot;) انتخاب ستونی خاص با اندیس df[, 3] ## [1] Male &lt;NA&gt; Female ## Levels: Female Male انتخاب ستونی خاص با نام df[, &quot;Gender&quot;] ## [1] Male &lt;NA&gt; Female ## Levels: Female Male انتخاب ستونی خاص با علامت دلار df$Gender ## [1] Male &lt;NA&gt; Female ## Levels: Female Male انتخاب سطر خاص با اندیس df[2, ] ## Name Sen Gender Single ## dovomi Xie 45 &lt;NA&gt; FALSE انتخاب سطر خاص با نام df[&quot;dovomi&quot;,] ## Name Sen Gender Single ## dovomi Xie 45 &lt;NA&gt; FALSE انتخاب سطر با فیلتر کردن برحسب یک مقدار خاص df[df$Name == &quot;Mohsen&quot;, ] ## Name Sen Gender Single ## avali Mohsen NA Male TRUE استفاده از کتابخانه tidyverse library(tidyverse) df |&gt; filter(Name == &quot;Mohsen&quot;) |&gt; select(Gender) ## Gender ## avali Male "],["تمرینات.html", "فصل 15 تمرینات", " فصل 15 تمرینات برای تمرین بیشتر می‌توانید به سایت‌هایی که تمرینات R ارائه می‌دهند دسترسی داشته باشید. با جستجو practice in r در گوگل به سایت‌های زیر دسترسی پیدا می‌کنید R-Exercise R-Programming-Exercises R-programming-Exercises-Practice-Solution "],["main_resource.html", "منابع", " منابع کتاب مفاهیم پایه R نسخه تحت وب کتاب R Basics را می‌توانید از اینجا بخوانید. کتاب دستورات پایه R نسخه تحت وب کتاب Basic R Commands را می‌توانید از اینجا بخوانید. برگه تقلب برای یاد آوری سریع دستورات و مفاهیم پایه R یک برگه تقلب (Cheatsheet) مبانی R تهیه شده است که می‌توانید آن را از اینجا دانلود کنید. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
