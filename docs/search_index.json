[["index.html", "مبانی R مقدمه‌ای بر آشنایی با زبان برنامه نویسی R پیش گفتار", " مبانی R مقدمه‌ای بر آشنایی با زبان برنامه نویسی R محسن ابراهیمی فرودین ۱۴۰۰ پیش گفتار به همراه این کتاب می‌توانید یادگیری زبان برنامه نویسی R را شروع کنید. سعی کنید بعد از هر آموزش تمرینات مربوط به آن را انجام دهید. نظرات و پیشنهادات خود را می‌توانید از طریق ایمیل mohsenebrahimy.ir@gmail.com برای بهبود کتاب به نویسنده ارسال کنید تا در هر بروزرسانی اصلاحات صورت گیرد. این نسخه در تاریخ ۱۴۰۱-۸-۱۸ بروزرسانی شده است. https://mohsenebrahimyir.github.io/base-r/ https://github.com/mohsenebrahimyir/base-r امیدوارم این کتاب برایتان مفید باشد. محسن ابراهیمی www.mohsenebrahimy.ir "],["مقدمه.html", "فصل 1 مقدمه", " فصل 1 مقدمه زبان برنامه نویسی R یکی از بهترین زبان‌های برنامه نویسی متن باز است که برای تحلیل آماری داده‌ها استفاده می‌شود. برای این زبان کتابخانه‌های آماری بسیار زیادی تهیه شده است که می‌توانیم به راحتی از آن‌ها استفاده کنیم. "],["نصب-و-آماده-سازی-اولیه.html", "فصل 2 نصب و آماده سازی اولیه ", " فصل 2 نصب و آماده سازی اولیه "],["نصب-r.html", "2.1 نصب R", " 2.1 نصب R از طریق سایت www.r-project.org می‌توانید متناسب با سیستم عامل خود آخرین نسخه R را دانلود و نصب کنید. "],["نصب-rstudio.html", "2.2 نصب RStudio", " 2.2 نصب RStudio برای نوشتن، اجرا و خروجی گرفتن بهتر می‌توانید از یک نرم افزار IDE (Integrated Development Environment) استفاده کنید. برای زبان R می‌توانید از RStudio استفاده کنید. از طریق سایت www.posit.co می‌توانید متناسب با سیستم عامل خود آخرین نسخه RStudio را دانلود و نصب کنید. "],["محیط-rstudio.html", "2.3 محیط RStudio", " 2.3 محیط RStudio شکل 2.1: محیط نرم افزار RStudio "],["مفاهیم-پایه.html", "فصل 3 مفاهیم پایه", " فصل 3 مفاهیم پایه برای شروع بهتر است با یکسری از مفاهیم آشنا شویم. "],["اجرای-کد.html", "3.1 اجرای کد", " 3.1 اجرای کد راه اندازی محیط R در ترمینال و اجرای مستقیم کد در کنسول (Console) $ R &gt; my code ... نکته. برای پاک کردن کنسول می‌توانید از کلید میانبر ctrl + L استفاده کنید. ذخیره کدها در فایل متنی با پسوند code.R و اجرای آن با کد Rscript در کامند لاین $ Rscript code.R چاپ کردن print(&quot;Salam Donya!&quot;) [1] &quot;Salam Donya!&quot; دیدگاه و نظرات برای نوشتن دیدگاه (Comment) یا اجرا نکردن کدهای نوشته شده باید از # قبل از آن‌ها استفاده شود # The Comment helps the readability of the coding نکته. قرار دادن دیدگاه به فهم و خوانایی کد برای دیگران و بازبینی‌های آینده کمک می‌کند. "],["راهنما.html", "3.2 راهنما", " 3.2 راهنما ابزار راهنما (Help) در زبان R به ما امکان دسترسی به توضیحات مختصر هر شئ (Object) را می‌دهد. گرفتن راهنما برای تابع خاص که نام آن را می‌دانیم: ?print انجام جستجو در تمام بسته‌های نصب شده در سیستم: ??print جستجوی کلمه یا عبارت در پرونده راهنما: help.search(&#39;weighed print&#39;) پیدا کردن راهنما برای یک بسته help(package = &#39;tidyverse&#39;) پیدا کردن راهنمای توابع در همه بسته‌های موجود سایت CRAN RSiteSearch(&quot;print&quot;) استفاده از سایت گوگل (www.google.com) نکته. بهترین مهارت برای یک برنامه نویس مهارت گوگل کردن است. پرسیدن و جستجوی سوالات در سایت (stackoverflow.com) نکته. سعی کنید در ابتدای کار کل کدها را تایپ کنید و بدون فهم درست از کدها چیزی را کپی نکنید. "],["محیط-کاری.html", "3.3 محیط کاری", " 3.3 محیط کاری پیدا کردن محیط کاری (Working Directory) (جایی که در آن ورودی‌ها را گرفته و خروجی‌ها را تولید می‌کنید) getwd() [1] &quot;/home/{USER}/Desktop/&quot; تنظیم و تغییر محیط کاری setwd(&#39;/home/{USER}/Documents/&#39;) دقت داشته باشید که در زبان R مانند لینوکس از \"/\" برای جداسازی پوشه (Directory) و زیر پوشه (Sub Directory) استفاده می‌شود. برای تنظیم محیط کاری بهتره از پروژه (Project) در RStudio استفاده کنید. "],["متغییرها.html", "فصل 4 متغییرها", " فصل 4 متغییرها هر شئ را می‌توان با =، &lt;- و -&gt; به یک متغییر مقدار دهی کرد variable = &quot;Salam&quot; # or variable &lt;- &quot;Salam&quot; # Alt + &quot;-&quot; # or &quot;Salam&quot; -&gt; variable برای نوشتن &lt;- می‌توان از کلید‌های میانبر Alt + - استفاده نمود. برای نمایش متغییر در هنگام مقدار دهی می‌توان کل کد را داخل پرانتز قرار داد. (variable &lt;- &quot;Salam&quot;) [1] &quot;Salam&quot; نام متغییر با حروف کوچک و بزرگ انگلیسی شروع می‌شود و شامل تمام حروف و اعداد انگلیسی، نقطه و زیرخط می‌تواند باشد. vAri.25_blE &lt;- &quot;Salam&quot; "],["data-structure.html", "فصل 5 ساختار داده", " فصل 5 ساختار داده یافتن نوع (Type) یا کلاس (Class) یک شی typeof(&quot;Mohsen&quot;) [1] &quot;character&quot; class(&quot;Mohsen&quot;) [1] &quot;character&quot; شکل 5.1: ساختار داده در R برای مدیریت داده‌ها در زبان برنامه نویسی R، ساختار داده‌های مختلفی را در نظر گرفته‌اند. مانند: بردار (Vector) 1:4 [1] 1 2 3 4 ماتریس (Matrix) matrix(data = 1:4, nrow = 2) [,1] [,2] [1,] 1 3 [2,] 2 4 آرایه (Array) array(data = 1:8, dim = c(2, 2, 2)) , , 1 [,1] [,2] [1,] 1 3 [2,] 2 4 , , 2 [,1] [,2] [1,] 5 7 [2,] 6 8 فرمت داده (Data Frame) data.frame( &quot;name&quot; = c(&quot;ali&quot;, &quot;sara&quot;, &quot;reza&quot;), &quot;age&quot; = c(27, 20, 30) ) name age male 1 ali 27 TRUE 2 sara 20 FALSE 3 reza 30 TRUE لیست (List) list( &quot;vec&quot; = 1:4, &quot;mat&quot; = matrix(data = 1:4, nrow = 2), &quot;ary&quot; = array(data = 1:8, dim = c(2, 2, 2)), &quot;df&quot; = data.frame( &quot;name&quot; = c(&quot;ali&quot;, &quot;sara&quot;, &quot;reza&quot;), &quot;age&quot; = c(27, 20, 30) ) ) $vec [1] 1 2 3 4 $mat [,1] [,2] [1,] 1 3 [2,] 2 4 $ary , , 1 [,1] [,2] [1,] 1 3 [2,] 2 4 , , 2 [,1] [,2] [1,] 5 7 [2,] 6 8 $df name age 1 ali 27 2 sara 20 3 reza 30 "],["دستورات-شرطی.html", "فصل 6 دستورات شرطی", " فصل 6 دستورات شرطی "],["حلقه.html", "فصل 7 حلقه", " فصل 7 حلقه while برای تکرارهای به مقدار نا معلوم می‌توانیم از ساختار حلقه while استفاده نماییم. i = 5 while (i &gt; 0) { &quot;%sth alaki&quot; |&gt; sprintf(i) |&gt; print() i &lt;- i - 1 } ## [1] &quot;5th alaki&quot; ## [1] &quot;4th alaki&quot; ## [1] &quot;3th alaki&quot; ## [1] &quot;2th alaki&quot; ## [1] &quot;1th alaki&quot; for برای تکرار به مقدار معلوم می‌توانیم از ساختار حلقه for استفاده نماییم. for (i in 1:5) { &quot;%sth alaki&quot; |&gt; sprintf(i) |&gt; print() } ## [1] &quot;1th alaki&quot; ## [1] &quot;2th alaki&quot; ## [1] &quot;3th alaki&quot; ## [1] &quot;4th alaki&quot; ## [1] &quot;5th alaki&quot; "],["توابع.html", "فصل 8 توابع", " فصل 8 توابع تابع (Function) با گرفتن یک یا چند ورودی، یک یا چند خروجی را تولید می‌کند. \\[\\Large x:{\\bf Input} \\Longrightarrow f(x) : {\\bf Output} \\] x = &quot;Salam&quot; # Input print(x) # Function [1] &quot;Salam&quot; # Output "],["توابع-درون-ساخت.html", "8.1 توابع درون ساخت", " 8.1 توابع درون ساخت توابعی که به طور پیش فرض در R قرار دارند را توابع درون ساخت (built-in) می‌گویند. دریافت خلاصه‌ای از ساختار (Structure) یک شئ str(iris) &#39;data.frame&#39;: 150 obs. of 5 variables: $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... تبدیل چند رشته به یک رشته paste(&quot;Salam &quot;, &quot;Donya&quot;, &quot;!&quot;, sep = &quot;&quot;) ## or paste0() [1] &quot;Salam Donya!&quot; جای گذاری یک مقدار در یک رشته با استفاده از %s sprintf(fmt = &quot;Salam %s!&quot;, &quot;Donya&quot;) [1] &quot;Salam Donya!&quot; چاپ کردن چند چیز cat(&quot;Salam &quot;, &quot;Donya&quot;, &quot;!&quot;, sep = &quot;&quot;) Salam Donya! خواندن کامند لاین readline(prompt = &quot;lotfan ye chezy vared konid: &quot;) lotfan ye chezy vared konid: "],["ساخت-تابع.html", "8.2 ساخت تابع", " 8.2 ساخت تابع برای ساخت تابع باید به صورت زیر عمل کنیم. name &lt;- function(input) { # Do something return(output) } تابع جمع بستن jam &lt;- function(x, y) { z &lt;- x + y return(z) } jam(2, 3) [1] 5 class(jam) [1] &quot;function&quot; تابع سلام کردن salam &lt;- function(name) { salam_name &lt;- paste(&quot;Salam&quot;, name, &quot;aziz&quot;) return(salam_name) } salam(&quot;Mohsen&quot;) [1] &quot;Salam Mohsen aziz&quot; مقدار اولیه برای ورودی‌ها salam &lt;- function(name = &quot;Mohsen&quot;) { salam_name &lt;- sprintf(&quot;Salam %s Aziz&quot;, name) return(salam_name) } salam() [1] &quot;Salam Mohsen Aziz&quot; salam(name = &quot;Arash&quot;) [1] &quot;Salam Arash Aziz&quot; "],["عملگرها.html", "فصل 9 عملگرها", " فصل 9 عملگرها \\[\\Large f(x_1, x_2) = x_1 \\; f \\; x_2 \\] عملگر (Operator) نوع خاصی از تابع است که روی چیز‌های که در چپ و راست آن قرار گیرد، اعمال می‌شود. "],["عملگر-پایپ.html", "9.1 عملگر پایپ", " 9.1 عملگر پایپ با استفاده از عملگر پایپ می‌توانیم خروجی یک تابع را به عنوان وروردی به اولین آرگومان تابع بعدی دهیم \\[\\Large f(g(x)) = (fog)(x) \\] عملگر پایپ می‌تواند کار با توابع را ساده و از تعریف متغییر‌های زیاد جلوگیری کند. (|&gt;): یک عملگر درون ساخت است. paste(&quot;Salam&quot;, &quot;Mohsen&quot;) |&gt; print() [1] &quot;Salam Mohsen&quot; (%&gt;%): باید بسته tidyverse را فراخانی کنیم. paste(&quot;Salam&quot;, &quot;Mohsen&quot;) %&gt;% print() [1] &quot;Salam Mohsen&quot; "],["عملگرهای-حسابی.html", "9.2 عملگرهای حسابی", " 9.2 عملگرهای حسابی عملگر حسابی اعداد را به عنوان ورودی می‌گیرد و اعمال ریاضی را اعمال می‌کند. جمع 2 + 3 [1] 5 تفریق 2 - 3 [1] -1 ضرب 2 * 3 [1] 6 تقسیم 2 / 3 [1] 0.6666667 باقی‌مانده تقسیم 5 %% 3 [1] 2 قسمت صحیح تقسیم 5 %/% 3 [1] 1 توان 2^3 [1] 8 استفاده از توان کسری برای جذر (4)^(1/2) [1] 2 "],["عملگر-منطقی.html", "9.3 عملگر منطقی", " 9.3 عملگر منطقی عملگر منطقی مقادیر درست و غلط برمی‌گرداند. برابری 1 == 2 [1] FALSE نابرابری 1 != 2 [1] TRUE بزرگتری 2 &gt; 2 [1] FALSE بزرگتری یا برابری 2 &gt;= 2 [1] FALSE کوچکتری 2 &lt; 2 [1] FALSE کوچکتری یا برابری 2 &lt;= 2 [1] TRUE و هر دو شرط اجرا می‌شود و در صورت درست بودن هر دوی آن‌ها مقدار TRUE برمی‌گرداند در غیر این صورت مقدار FALSE برمیگرداند. 1 == 2 &amp; 1 &lt; 2 [1] FALSE شرط دوم در صورت درست بودن شرط اول اجرا می‌شود. و در صورت درست بودن هر دوی آن‌ها مقدار TRUE برمی‌گرداند در غیر این صورت مقدار FALSE برمیگرداند. 1 == 2 &amp;&amp; 1 &lt; 2 [1] FALSE یا هر دو شرط اجرا می‌شود و در صورت درست بودن یکی از آن‌ها مقدار TRUE برمی‌گرداند در غیر این صورت مقدار FALSE برمیگرداند. 1 == 2 | 1 &lt; 2 [1] TRUE شرط دوم در صورت نادرست بودن شرط اول اجرا می‌شود و اگر یکی از آن‌ها درست بود مقدار TRUE برمی‌گرداند در غیر این صورت مقدار FALSE برمیگرداند. 1 == 2 || 1 &lt; 2 [1] TRUE مخالف بعد از بررسی عمل منطقی خلاف مقدار برگردانده شده را بر می‌گرداند. !(1 == 2) [1] TRUE "],["بسته.html", "9.4 بسته", " 9.4 بسته خیلی از افراد توابعی که برای پروژه‌های شخصی خود نوشته‌اند را به صورت بسته (Package) اختیار دیگران قرار داده‌اند. "],["نصب-بسته.html", "9.5 نصب بسته", " 9.5 نصب بسته برای استفاده از توابع توسعه داده شده توسط دیگران، باید بسته مربوطه آن تابع را نصب نماییم: دانلود و نصب بسته‌ها از مخزن کِرَن (CRAN) install.packages(&quot;dplyr&quot;) نصب از مخزن گیت‌هاب (Github) ابتدا باید یکی از بسته‌های remotes یا devtools را نصب و سپس بسته مورد نظر را با یکی از روش زیر نصب نمایید. remotes::install_github(&quot;tidyverse/dplyr&quot;) # or devtools::install_github(&quot;tidyverse/dplyr&quot;) دانلود از مخازن دیگر مخزن بیت باکت (Bitbucket) با تابع install_bitbucket() مخزن گیت جنریک [(Generic git){dir=ltr} با تابع install_git() … "],["بارگذاری-بسته.html", "9.6 بارگذاری بسته", " 9.6 بارگذاری بسته library(\"package\"): تمام توابع موجود در یک پکیج را در محیط کاری آپلود می‌کند، اگر بسته نصب نباشد خطا (Error) برمی‌گرداند: library(&quot;alaki&quot;) Error in library(&quot;alaki&quot;) : there is no package called ‘alaki’ require(\"package\"): تمام توابع موجود در یک پکیج را در محیط کاری آپلود می‌کند، اگر بسته نصب نباشد غلط (FALSE) برمی‌گرداند: require(&quot;alaki&quot;) Loading required package: alaki Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE, : there is no package called ‘alaki’ (require(&quot;alaki&quot;)) [1] FALSE if (!require(&quot;alaki&quot;)) install.packages(&quot;alaki&quot;) package::function(): این روش فقط برای مواقعی است که به صورت محلی می‌خواهیم تابع خاصی از یک پکیج را استفاده کنیم و دیگر به آن نیازی نداریم. dplyr::select(iris, c(&quot;Sepal.Width&quot;, &quot;Species&quot;)) Sepal.Width Species 1 3.5 setosa 2 3.0 setosa 3 3.2 setosa 4 3.1 setosa ... ... ... "],["بستههای-پرکاربرد.html", "9.7 بسته‌های پرکاربرد", " 9.7 بسته‌های پرکاربرد Tidyverse library(tidyverse) ── Attaching packages ────────────────── tidyverse 1.3.1 ── ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ✓ tibble 3.1.6 ✓ dplyr 1.0.8 ✓ tidyr 1.2.0 ✓ stringr 1.4.0 ✓ readr 2.1.2 ✓ forcats 0.5.1 ── Conflicts ─────────────────────────── tidyverse_conflicts() ── x dplyr::filter() masks stats::filter() x dplyr::lag() masks stats::lag() این بسته متشکل از بسته‌های معروفی همچون ggplot، tidyr، dplyr، readr، stringr و … است. "],["فایلها.html", "فصل 10 فایل‌ها", " فصل 10 فایل‌ها فایل‌ها برای ذخیره سازی، و انتقال داده‌ها استفاده می‌شوند که نیاز داریم از روی آن‌ها داده‌ها را بخوانیم و بنویسیم. "],["مقادیر-جدا-شده-با-کاما.html", "10.1 مقادیر جدا شده با کاما", " 10.1 مقادیر جدا شده با کاما خروجی گرفتن داده با پسوند .csv write.csv(x = iris, file = &quot;iris.csv&quot;) وارد کردن داده با پسوند .csv read.csv(file = &quot;iris.csv&quot;) X Sepal.Length Sepal.Width Petal.Length Petal.Width Species 1 1 5.1 3.5 1.4 0.2 setosa 2 2 4.9 3.0 1.4 0.2 setosa 3 3 4.7 3.2 1.3 0.2 setosa "],["اکسل.html", "10.2 اکسل", " 10.2 اکسل خروجی گرفتن داده با پسوند اکسل writexl::write_xlsx(x = iris, path = &quot;iris.xlsx&quot;) [1] &quot;Salam&quot; وارد کردن داده با پسوند اکسل readxl::read_xlsx(path = &quot;iris.xlsx&quot;) # A tibble: 150 × 5 Sepal.Length Sepal.Width Petal.Length Petal.Width Species &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; 1 5.1 3.5 1.4 0.2 setosa 2 4.9 3 1.4 0.2 setosa 3 4.7 3.2 1.3 0.2 setosa "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
